package com.metatrope.tools.terraria

import scala.collection.mutable.Map
import scala.collection.mutable.HashMap

// Credit: All the hard work for this was done by the guys who built the
// More Terra World Viewer from http://moreterra.codeplex.com/
object TileType extends Enumeration {
    private val k = new HashMap[Int, TileTypeValue]()
    
    def AlwaysFalse:(Int=>Boolean) = { ver => false }
    def AlwaysTrue:(Int=>Boolean) = { ver => true }

    val Dirt = new TileTypeValue(0, AlwaysFalse)
    val Stone = new TileTypeValue(1, AlwaysFalse)
    val Grass = new TileTypeValue(2, AlwaysFalse)
    val Plants = new TileTypeValue(3, AlwaysTrue)
    val Torch = new TileTypeValue(4, { ver => if (ver >= 36) true else false })
    val Trees = new TileTypeValue(5, AlwaysTrue)
    val Iron = new TileTypeValue(6, AlwaysFalse)
    val Copper = new TileTypeValue(7, AlwaysFalse)
    val Gold = new TileTypeValue(8, AlwaysFalse)
    val Silver = new TileTypeValue(9, AlwaysFalse)
    val Door = new TileTypeValue(10, AlwaysTrue)
    val DoorOpen = new TileTypeValue(11, AlwaysTrue)
    val Heart = new TileTypeValue(12, AlwaysTrue)
    val Bottles = new TileTypeValue(13, AlwaysTrue)
    val Table = new TileTypeValue(14, AlwaysTrue)
    val Chair = new TileTypeValue(15, AlwaysTrue)
    val Anvil = new TileTypeValue(16, AlwaysTrue)
    val Furnace = new TileTypeValue(17, AlwaysTrue)
    val CraftingTable = new TileTypeValue(18, AlwaysTrue)
    val WoodenPlatform = new TileTypeValue(19, AlwaysFalse)
    val PlantsDecorative = new TileTypeValue(20, AlwaysTrue)
    val Chest = new TileTypeValue(21, AlwaysTrue)
    val Demonite = new TileTypeValue(22, AlwaysFalse)
    val CorruptionGrass = new TileTypeValue(23, AlwaysFalse)
    val CorruptionPlants = new TileTypeValue(24, AlwaysTrue)
    val Ebonstone = new TileTypeValue(25, AlwaysFalse)
    val Altar = new TileTypeValue(26, AlwaysTrue)
    val Sunflower = new TileTypeValue(27, AlwaysTrue)
    val Pot = new TileTypeValue(28, AlwaysTrue)
    val PiggyBank = new TileTypeValue(29, AlwaysTrue)
    val BlockWood = new TileTypeValue(30, AlwaysFalse)
    val ShadowOrb = new TileTypeValue(31, AlwaysTrue)
    val CorruptionVines = new TileTypeValue(32, AlwaysFalse)
    val Candle = new TileTypeValue(33, AlwaysTrue)
    val ChandelierCopper = new TileTypeValue(34, AlwaysTrue)
    val ChandelierSilver = new TileTypeValue(35, AlwaysTrue)
    val ChandelierGold = new TileTypeValue(36, AlwaysTrue)
    val Meteorite = new TileTypeValue(37, AlwaysFalse)
    val BlockStone = new TileTypeValue(38, AlwaysFalse)
    val BlockRedStone = new TileTypeValue(39, AlwaysFalse)
    val Clay = new TileTypeValue(40, AlwaysFalse)
    val BlockBlueStone = new TileTypeValue(41, AlwaysFalse)
    val LightGlobe = new TileTypeValue(42, AlwaysTrue)
    val BlockGreenStone = new TileTypeValue(43, AlwaysFalse)
    val BlockPinkStone = new TileTypeValue(44, AlwaysFalse)
    val BlockGold = new TileTypeValue(45, AlwaysFalse)
    val BlockSilver = new TileTypeValue(46, AlwaysFalse)
    val BlockCopper = new TileTypeValue(47, AlwaysFalse)
    val Spikes = new TileTypeValue(48, AlwaysFalse)
    val CandleBlue = new TileTypeValue(49, AlwaysFalse)
    val Books = new TileTypeValue(50, AlwaysTrue)
    val Web = new TileTypeValue(51, AlwaysFalse)
    val Vines = new TileTypeValue(52, AlwaysFalse)
    val Sand = new TileTypeValue(53, AlwaysFalse)
    val Glass = new TileTypeValue(54, AlwaysFalse)
    val Sign = new TileTypeValue(55, AlwaysTrue)
    val Obsidian = new TileTypeValue(56, AlwaysFalse)
    val Ash = new TileTypeValue(57, AlwaysFalse)
    val Hellstone = new TileTypeValue(58, AlwaysFalse)
    val Mud = new TileTypeValue(59, AlwaysFalse)
    val UndergroundJungleGrass = new TileTypeValue(60, AlwaysFalse)
    val UndergroundJunglePlants = new TileTypeValue(61, AlwaysTrue)
    val UndergroundJungleVines = new TileTypeValue(62, AlwaysFalse)
    val Sapphire = new TileTypeValue(63, AlwaysFalse)
    val Ruby = new TileTypeValue(64, AlwaysFalse)
    val Emerald = new TileTypeValue(65, AlwaysFalse)
    val Topaz = new TileTypeValue(66, AlwaysFalse)
    val Amethyst = new TileTypeValue(67, AlwaysFalse)
    val Diamond = new TileTypeValue(68, AlwaysFalse)
    val UndergroundJungleThorns = new TileTypeValue(69, AlwaysFalse)
    val UndergroundMushroomGrass = new TileTypeValue(70, AlwaysFalse)
    val UndergroundMushroomPlants = new TileTypeValue(71, AlwaysTrue)
    val UndergroundMushroomTrees = new TileTypeValue(72, AlwaysTrue)
    val Plants2 = new TileTypeValue(73, AlwaysTrue)
    val Plants3 = new TileTypeValue(74, AlwaysTrue)
    val BlockObsidian = new TileTypeValue(75, AlwaysFalse)
    val BlockHellstone = new TileTypeValue(76, AlwaysFalse)
    val Hellforge = new TileTypeValue(77, AlwaysTrue)
    val DecorativePot = new TileTypeValue(78, AlwaysTrue)
    val Bed = new TileTypeValue(79, AlwaysTrue)
    val Cactus = new TileTypeValue(80, AlwaysFalse)
    val Coral = new TileTypeValue(81, AlwaysTrue)
    val HerbImmature = new TileTypeValue(82, AlwaysTrue)
    val HerbMature = new TileTypeValue(83, AlwaysTrue)
    val HerbBlooming = new TileTypeValue(84, AlwaysTrue)
    val Tombstone = new TileTypeValue(85, AlwaysTrue)
    val Loom = new TileTypeValue(86, AlwaysTrue)
    val Piano = new TileTypeValue(87, AlwaysTrue)
    val Dresser = new TileTypeValue(88, AlwaysTrue)
    val Bench = new TileTypeValue(89, AlwaysTrue)
    val Bathtub = new TileTypeValue(90, AlwaysTrue)
    val Banner = new TileTypeValue(91, AlwaysTrue)
    val Lamppost = new TileTypeValue(92, AlwaysTrue)
    val Tikitorch = new TileTypeValue(93, AlwaysTrue)
    val Keg = new TileTypeValue(94, AlwaysTrue)
    val ChineseLamp = new TileTypeValue(95, AlwaysTrue)
    val CookingPot = new TileTypeValue(96, AlwaysTrue)
    val Safe = new TileTypeValue(97, AlwaysTrue)
    val SkullCandle = new TileTypeValue(98, AlwaysTrue)
    val Trashcan = new TileTypeValue(99, AlwaysTrue)
    val Candleabra = new TileTypeValue(100, AlwaysTrue)
    val Bookcase = new TileTypeValue(101, AlwaysTrue)
    val Throne = new TileTypeValue(102, AlwaysTrue)
    val Plate = new TileTypeValue(103, AlwaysTrue)
    val Clock = new TileTypeValue(104, AlwaysTrue)
    val SuitOfArmor = new TileTypeValue(105, AlwaysTrue)
    val Sawmill = new TileTypeValue(106, AlwaysTrue)
    val Unknown = new TileTypeValue(127, AlwaysFalse)
    val Spawn = new TileTypeValue(256, AlwaysFalse)
    val ArmsDealer = new TileTypeValue(257, AlwaysFalse)
    val Clothier = new TileTypeValue(258, AlwaysFalse)
    val Demolitionist = new TileTypeValue(259, AlwaysFalse)
    val Dryad = new TileTypeValue(260, AlwaysFalse)
    val Guide = new TileTypeValue(261, AlwaysFalse)
    val Merchant = new TileTypeValue(262, AlwaysFalse)
    val Nurse = new TileTypeValue(263, AlwaysFalse)
    val OldMan = new TileTypeValue(264, AlwaysFalse)
    val Sky = new TileTypeValue(265, AlwaysFalse)
    val Water = new TileTypeValue(266, AlwaysFalse)
    val Lava = new TileTypeValue(267, AlwaysFalse)
    val WallStone = new TileTypeValue(268, AlwaysFalse)
    val WallDirt = new TileTypeValue(269, AlwaysFalse)
    val WallEbonstone = new TileTypeValue(270, AlwaysFalse)
    val WallWood = new TileTypeValue(271, AlwaysFalse)
    val WallGreyBrick = new TileTypeValue(272, AlwaysFalse)
    val WallRedBrick = new TileTypeValue(273, AlwaysFalse)
    val WallBlueBrick = new TileTypeValue(274, AlwaysFalse)
    val WallGreenBrick = new TileTypeValue(275, AlwaysFalse)
    val WallPinkBrick = new TileTypeValue(276, AlwaysFalse)
    val WallGoldBrick = new TileTypeValue(277, AlwaysFalse)
    val WallSilverBrick = new TileTypeValue(278, AlwaysFalse)
    val WallCopperBrick = new TileTypeValue(279, AlwaysFalse)
    val WallHellstone = new TileTypeValue(280, AlwaysFalse)
    val WallObsidianBrick = new TileTypeValue(281, AlwaysFalse)
    val WallMud = new TileTypeValue(282, AlwaysFalse)
    val WallDirtSafe = new TileTypeValue(283, AlwaysFalse)
    val WallBlueSafe = new TileTypeValue(284, AlwaysFalse)
    val WallGreenSafe = new TileTypeValue(285, AlwaysFalse)
    val WallPinkSafe = new TileTypeValue(286, AlwaysFalse)
    val WallObsidian = new TileTypeValue(287, AlwaysFalse)
    val WallBackground = new TileTypeValue(288, AlwaysFalse)

    class TileTypeValue(val code: Int, val important: Int=>Boolean) extends Val(code, toString()) {
        type TileType = TileTypeValue
        k.put(code, this)
    }
    def withId(code: Int, defaultValue: TileTypeValue): TileTypeValue = k.getOrElse(code, defaultValue).asInstanceOf[TileTypeValue]
}